{"timestamp":"2025-07-16T23:22:39.438052","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-16T23:22:39.440028","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-16T23:22:42.233456","level":"info","event":"Connection Retrieved 'google_conn_id'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-16T23:22:42.252823","level":"info","event":"Connection Retrieved 'postgres_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-16T23:22:42.530976","level":"warning","event":"/home/airflow/.local/lib/python3.10/site-packages/airflow/providers/common/sql/hooks/sql.py:482: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-07-16T23:23:15.734453","level":"info","event":"Data stream uploaded to sale_transactions.parquet in maxi-sales-bucket002 bucket","logger":"airflow.task.hooks.airflow.providers.google.cloud.hooks.gcs.GCSHook"}
{"timestamp":"2025-07-16T23:23:16.128963","level":"info","event":"sale_transactions exported: 1020500 rows","logger":"unusual_prefix_39d5b4c4fb0e26bd2861cde9a37101b8f5d54193_dag"}
{"timestamp":"2025-07-16T23:23:16.277040","level":"info","event":"Done. Returned value was: 1020500","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-07-16T23:23:16.278017","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01981572-e5ef-71fb-a7df-77626a674e36'), task_id='export_sale_transactions', dag_id='postgres_gcs_validation_dag', run_id='manual__2025-07-16T22:55:08.201311+00:00', try_number=1, map_index=-1, hostname='b855031a75f9', context_carrier={}, task=<Task(_PythonDecoratedOperator): export_sale_transactions>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=3, start_date=datetime.datetime(2025, 7, 16, 23, 22, 38, 473675, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}

{"timestamp":"2025-07-16T22:56:02.086031","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-16T22:56:02.128014","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-16T22:56:32.534614","level":"error","event":"Process timed out, PID: 330","logger":"airflow.utils.timeout.TimeoutPosix"}
{"timestamp":"2025-07-16T22:56:33.119308Z","level":"error","event":"Exception ignored in: <module 'collections.abc' from '/usr/local/lib/python3.10/collections/abc.py'>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.165476Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.166513Z","level":"error","event":"  File \"<string>\", line 1, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.168643Z","level":"error","event":"  File \"/home/airflow/.local/lib/python3.10/site-packages/airflow/utils/timeout.py\", line 69, in handle_timeout","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.168989Z","level":"error","event":"    raise AirflowTaskTimeout(self.error_message)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.180788Z","level":"error","event":"airflow.exceptions.AirflowTaskTimeout: DagBag import timeout for /opt/airflow/dags/dag.py after 30.0s.","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.188696Z","level":"error","event":"Please take a look at these docs to improve your DAG import time:","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.189134Z","level":"error","event":"* https://airflow.apache.org/docs/apache-airflow/3.0.2/best-practices.html#top-level-python-code","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:56:33.189557Z","level":"error","event":"* https://airflow.apache.org/docs/apache-airflow/3.0.2/best-practices.html#reducing-dag-complexity, PID: 330","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-16T22:58:15.813143","level":"warning","event":"<frozen importlib._bootstrap>:241: RuntimeWarning: Cython module failed to patch module with custom type\n","logger":"py.warnings"}
{"timestamp":"2025-07-16T22:58:16.205856","level":"info","event":"Connection Retrieved 'postgres_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-16T22:58:18.969812","level":"warning","event":"/home/airflow/.local/lib/python3.10/site-packages/airflow/providers/common/sql/hooks/sql.py:482: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-07-16T22:58:22.242833","level":"info","event":"Running statement: SELECT COUNT(*) FROM products, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-16T22:58:22.530566","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-16T22:58:22.534794","level":"info","event":"products - row_count: 600","logger":"unusual_prefix_39d5b4c4fb0e26bd2861cde9a37101b8f5d54193_dag"}
{"timestamp":"2025-07-16T22:58:22.608717","level":"info","event":"Running statement: SELECT COUNT(*) FROM products WHERE product_id IS NULL, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-16T22:58:22.616643","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-16T22:58:22.618769","level":"info","event":"products - null_check: 0","logger":"unusual_prefix_39d5b4c4fb0e26bd2861cde9a37101b8f5d54193_dag"}
{"timestamp":"2025-07-16T22:58:22.650647","level":"info","event":"Running statement: SELECT COUNT(*) - COUNT(DISTINCT product_id) FROM products, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-16T22:58:22.663208","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-16T22:58:22.665860","level":"info","event":"products - duplicate_check: 0","logger":"unusual_prefix_39d5b4c4fb0e26bd2861cde9a37101b8f5d54193_dag"}
{"timestamp":"2025-07-16T22:58:22.666068","level":"info","event":"products: Data quality validation passed","logger":"unusual_prefix_39d5b4c4fb0e26bd2861cde9a37101b8f5d54193_dag"}
{"timestamp":"2025-07-16T22:58:22.666468","level":"info","event":"Done. Returned value was: {'status': 'passed', 'table': 'products', 'metrics': {'row_count': 600, 'null_check': 0, 'duplicate_check': 0}}","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-07-16T22:58:22.666990","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01981572-e5f7-7cb1-87d1-c1edf9685af4'), task_id='validate_products', dag_id='postgres_gcs_validation_dag', run_id='manual__2025-07-16T22:55:08.201311+00:00', try_number=1, map_index=-1, hostname='b855031a75f9', context_carrier={}, task=<Task(_PythonDecoratedOperator): validate_products>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=3, start_date=datetime.datetime(2025, 7, 16, 22, 55, 48, 11429, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}

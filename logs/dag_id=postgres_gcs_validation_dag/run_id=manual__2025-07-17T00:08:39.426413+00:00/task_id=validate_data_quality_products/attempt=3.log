{"timestamp":"2025-07-17T09:58:43.882103","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-17T09:58:43.883244","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag2.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-17T09:58:54.296542","level":"info","event":"Validating data quality for table: products","logger":"unusual_prefix_b32ce7d530ba84fdd1796e135f31aa77492b4d52_dag2"}
{"timestamp":"2025-07-17T09:59:05.891245","level":"info","event":"Connection Retrieved 'postgres_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-17T09:59:12.374783","level":"warning","event":"/home/airflow/.local/lib/python3.10/site-packages/airflow/providers/common/sql/hooks/sql.py:482: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-07-17T09:59:16.253168","level":"error","event":"Error validating data quality for table: products. Error: cursor already closed","logger":"unusual_prefix_b32ce7d530ba84fdd1796e135f31aa77492b4d52_dag2"}
{"timestamp":"2025-07-17T09:59:16.267229","level":"info","event":"Done. Returned value was: False","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-07-17T09:59:16.300048","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('019817c5-a432-73a7-982f-0d3be41ec791'), task_id='validate_data_quality_products', dag_id='postgres_gcs_validation_dag', run_id='manual__2025-07-17T00:08:39.426413+00:00', try_number=3, map_index=-1, hostname='917cf4de9b3c', context_carrier={}, task=<Task(_PythonDecoratedOperator): validate_data_quality_products>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=3, start_date=datetime.datetime(2025, 7, 17, 9, 58, 43, 451508, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
